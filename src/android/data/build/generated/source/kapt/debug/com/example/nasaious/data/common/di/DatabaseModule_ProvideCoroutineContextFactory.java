// Generated by Dagger (https://dagger.dev).
package com.example.nasaious.data.common.di;

import com.example.nasaious.data.common.utils.ContextProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideCoroutineContextFactory implements Factory<ContextProvider> {
  private final DatabaseModule module;

  public DatabaseModule_ProvideCoroutineContextFactory(DatabaseModule module) {
    this.module = module;
  }

  @Override
  public ContextProvider get() {
    return provideCoroutineContext(module);
  }

  public static DatabaseModule_ProvideCoroutineContextFactory create(DatabaseModule module) {
    return new DatabaseModule_ProvideCoroutineContextFactory(module);
  }

  public static ContextProvider provideCoroutineContext(DatabaseModule instance) {
    return Preconditions.checkNotNullFromProvides(instance.provideCoroutineContext());
  }
}
