// Generated by Dagger (https://dagger.dev).
package com.example.nasaious.data.common.di;

import android.content.Context;
import com.example.nasaious.data.local.database.AppDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideDbFactory implements Factory<AppDatabase> {
  private final DatabaseModule module;

  private final Provider<Context> contextProvider;

  public DatabaseModule_ProvideDbFactory(DatabaseModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public AppDatabase get() {
    return provideDb(module, contextProvider.get());
  }

  public static DatabaseModule_ProvideDbFactory create(DatabaseModule module,
      Provider<Context> contextProvider) {
    return new DatabaseModule_ProvideDbFactory(module, contextProvider);
  }

  public static AppDatabase provideDb(DatabaseModule instance, Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideDb(context));
  }
}
