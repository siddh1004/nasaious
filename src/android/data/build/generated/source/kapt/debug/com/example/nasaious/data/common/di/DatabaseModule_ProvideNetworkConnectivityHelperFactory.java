// Generated by Dagger (https://dagger.dev).
package com.example.nasaious.data.common.di;

import android.content.Context;
import com.example.nasaious.data.common.utils.Connectivity;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideNetworkConnectivityHelperFactory implements Factory<Connectivity> {
  private final DatabaseModule module;

  private final Provider<Context> contextProvider;

  public DatabaseModule_ProvideNetworkConnectivityHelperFactory(DatabaseModule module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public Connectivity get() {
    return provideNetworkConnectivityHelper(module, contextProvider.get());
  }

  public static DatabaseModule_ProvideNetworkConnectivityHelperFactory create(DatabaseModule module,
      Provider<Context> contextProvider) {
    return new DatabaseModule_ProvideNetworkConnectivityHelperFactory(module, contextProvider);
  }

  public static Connectivity provideNetworkConnectivityHelper(DatabaseModule instance,
      Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideNetworkConnectivityHelper(context));
  }
}
