// Generated by Dagger (https://dagger.dev).
package com.example.nasaious.data.common.repository.image;

import com.example.nasaious.data.common.utils.ContextProvider;
import com.example.nasaious.data.local.dao.ImageDao;
import com.example.nasaious.data.remote.api.ApiCaller_MembersInjector;
import com.example.nasaious.data.remote.api.ImageApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ImageRepositoryImpl_Factory implements Factory<ImageRepositoryImpl> {
  private final Provider<ImageDao> imageDaoProvider;

  private final Provider<ImageApi> imageApiProvider;

  private final Provider<ContextProvider> contextProvider;

  public ImageRepositoryImpl_Factory(Provider<ImageDao> imageDaoProvider,
      Provider<ImageApi> imageApiProvider, Provider<ContextProvider> contextProvider) {
    this.imageDaoProvider = imageDaoProvider;
    this.imageApiProvider = imageApiProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public ImageRepositoryImpl get() {
    ImageRepositoryImpl instance = newInstance(imageDaoProvider.get(), imageApiProvider.get());
    ApiCaller_MembersInjector.injectContextProvider(instance, contextProvider.get());
    return instance;
  }

  public static ImageRepositoryImpl_Factory create(Provider<ImageDao> imageDaoProvider,
      Provider<ImageApi> imageApiProvider, Provider<ContextProvider> contextProvider) {
    return new ImageRepositoryImpl_Factory(imageDaoProvider, imageApiProvider, contextProvider);
  }

  public static ImageRepositoryImpl newInstance(ImageDao imageDao, ImageApi imageApi) {
    return new ImageRepositoryImpl(imageDao, imageApi);
  }
}
